#version 460 core

// define the number of CPs in the output patch                                                 
layout (vertices = 3) out;

uniform vec3 u_v3CameraPos;
uniform float u_fTessMultiplier;

// attributes of the input CPs                                                                  
in vec3 v3WorldPos[];                                                                       
in vec2 v2TexCoord[];                                                                       
in vec3 v3Normals[];                                                                         

// attributes of the output CPs                                                                 
out vec3 WorldPos_ES_in[];                                                                      
out vec2 TexCoord_ES_in[];                                                                      
out vec3 Normal_ES_in[]; 

// Calculate the tessellation level based on the distance to the camera
float GetTessellationLevel(float fDistance0, float fDistance1)
{
    float fAvgDistance = (fDistance0 + fDistance1) / 2.0f;

    float baseLevel = 0.0f;
    if (fAvgDistance < 200.0f)
        baseLevel = 3.0f;
    else if (fAvgDistance < 100.0f)
        baseLevel = 2.0f;
    else
        baseLevel = 1.0f;

    return max(1.0f, baseLevel); // ensure non-zero tess level
}


// a simple distance-based falloff (you can tweak the breakpoints & return values)
float GetDistanceFactor(float d)
{
    if (d <  50.0)
        return 2.0;    // up to 50 units away -> 2× tess
    if (d < 200.0)
        return 1.0;    // 50–200 -> 1× tess
    return 0.5;                   // >200 -> half tess
}

void main()
{
    // Set the control points of the output patch
    WorldPos_ES_in[gl_InvocationID] = v3WorldPos[gl_InvocationID];
    TexCoord_ES_in[gl_InvocationID] = v2TexCoord[gl_InvocationID];
    Normal_ES_in[gl_InvocationID] = v3Normals[gl_InvocationID];

    vec3 WorldPos1 = vec3(WorldPos_ES_in[0].x, WorldPos_ES_in[0].y, WorldPos_ES_in[0].z);
    vec3 WorldPos2 = vec3(WorldPos_ES_in[1].x, WorldPos_ES_in[1].y, WorldPos_ES_in[1].z);
    vec3 WorldPos3 = vec3(WorldPos_ES_in[2].x, WorldPos_ES_in[2].y, WorldPos_ES_in[2].z);

    // Calculate the tessellation factor based on the distance to the camera
    vec3 patchCenter = (WorldPos1 + WorldPos2 + WorldPos3) / 3.0;
    float distance = length(u_v3CameraPos - patchCenter);

    // Calculate the tessellation levels
    float baseLevel = GetTessellationLevel(distance, distance); // pass same value twice
    float tessLevel = max(1.0, u_fTessMultiplier * baseLevel);

    gl_TessLevelOuter[0] = tessLevel;
    gl_TessLevelOuter[1] = tessLevel;
    gl_TessLevelOuter[2] = tessLevel;
    gl_TessLevelInner[0] = tessLevel;
}